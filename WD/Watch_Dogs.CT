<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="46">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"money"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Watch_Dogs
  Version: 
  Date   : 2025-03-05
  Author : p

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(money,Disrupt_b64.dll,48 8B AC 24 B0 00 00 00 41 29 B4 BC 9C 00 00 00 48 8D 15 FC A7 A5 01 48 8D 4C 24 50) // should be unique
alloc(newmem,$1000,money)

label(code)
label(return)

newmem:

code:
  mov rbp,[rsp+000000B0]
  push rax
  mov rax, #9999999
  add, rax, esi
  mov [r12+rdi*4+0000009C], rax
  pop rax
  sub [r12+rdi*4+0000009C],esi
  lea rdx,[Disrupt_b64.dll+2E5DC68]
  lea rcx,[rsp+50]
  jmp return

money:
  jmp newmem
  nop 17
return:
registersymbol(money)

[DISABLE]

money:
  db 48 8B AC 24 B0 00 00 00 41 29 B4 BC 9C 00 00 00 48 8D 15 FC A7 A5 01 48 8D 4C 24 50

unregistersymbol(money)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: Disrupt_b64.dll+1403455

Disrupt_b64.dll+140342C: E8 4F C2 D4 FE           - call Disrupt_b64.dll+14F680
Disrupt_b64.dll+1403431: 48 8B 44 24 30           - mov rax,[rsp+30]
Disrupt_b64.dll+1403436: 48 8B 9C 24 A0 00 00 00  - mov rbx,[rsp+000000A0]
Disrupt_b64.dll+140343E: 48 85 C0                 - test rax,rax
Disrupt_b64.dll+1403441: 74 12                    - je Disrupt_b64.dll+1403455
Disrupt_b64.dll+1403443: F0 0F C1 28              - lock xadd [rax],ebp
Disrupt_b64.dll+1403447: FF CD                    - dec ebp
Disrupt_b64.dll+1403449: 75 0A                    - jne Disrupt_b64.dll+1403455
Disrupt_b64.dll+140344B: 48 8B 4C 24 30           - mov rcx,[rsp+30]
Disrupt_b64.dll+1403450: E8 2B C2 D4 FE           - call Disrupt_b64.dll+14F680
// ---------- INJECTING HERE ----------
Disrupt_b64.dll+1403455: 48 8B AC 24 B0 00 00 00  - mov rbp,[rsp+000000B0]
// ---------- DONE INJECTING  ----------
Disrupt_b64.dll+140345D: 41 29 B4 BC 9C 00 00 00  - sub [r12+rdi*4+0000009C],esi
Disrupt_b64.dll+1403465: 48 8D 15 FC A7 A5 01     - lea rdx,[Disrupt_b64.dll+2E5DC68]
Disrupt_b64.dll+140346C: 48 8D 4C 24 50           - lea rcx,[rsp+50]
Disrupt_b64.dll+1403471: E8 0A 39 D3 FE           - call Disrupt_b64.dll+136D80
Disrupt_b64.dll+1403476: F7 DE                    - neg esi
Disrupt_b64.dll+1403478: 8B D7                    - mov edx,edi
Disrupt_b64.dll+140347A: 49 8B CC                 - mov rcx,r12
Disrupt_b64.dll+140347D: 4C 8B C8                 - mov r9,rax
Disrupt_b64.dll+1403480: 44 8B C6                 - mov r8d,esi
Disrupt_b64.dll+1403483: C6 44 24 28 01           - mov byte ptr [rsp+28],01
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"expr"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Watch_Dogs
  Version: 
  Date   : 2025-03-06
  Author : p

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(expr,Disrupt_b64.dll,8B 80 A8 00 00 00 4C 89 A4 24 40 01 00 00 89 85 80 00 00 00 48 8B 86 20 0B 00 00 48 8D 15 64 A9 D9 01) // should be unique
alloc(newmem,$1000,expr)

label(code)
label(return)

newmem:

code:
  mov [rax+000000A8], #127500
  mov eax,[rax+000000A8]
  mov [rsp+00000140],r12
  mov [rbp+00000080],eax
  mov rax,[rsi+00000B20]
  lea rdx,[Disrupt_b64.dll+306EF80]
  jmp return

expr:
  jmp newmem
  nop 1D
return:
registersymbol(expr)

[DISABLE]

expr:
  db 8B 80 A8 00 00 00 4C 89 A4 24 40 01 00 00 89 85 80 00 00 00 48 8B 86 20 0B 00 00 48 8D 15 64 A9 D9 01

unregistersymbol(expr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: Disrupt_b64.dll+12D45FA

Disrupt_b64.dll+12D45CF: 8B C7                    - mov eax,edi
Disrupt_b64.dll+12D45D1: F0 41 0F C1 03           - lock xadd [r11],eax
Disrupt_b64.dll+12D45D6: FF C8                    - dec eax
Disrupt_b64.dll+12D45D8: 75 0A                    - jne Disrupt_b64.dll+12D45E4
Disrupt_b64.dll+12D45DA: 48 8B 4C 24 50           - mov rcx,[rsp+50]
Disrupt_b64.dll+12D45DF: E8 9C B0 E7 FE           - call Disrupt_b64.dll+14F680
Disrupt_b64.dll+12D45E4: 48 8B 05 F5 72 90 02     - mov rax,[Disrupt_b64.dll+3BDB8E0]
Disrupt_b64.dll+12D45EB: 48 85 C0                 - test rax,rax
Disrupt_b64.dll+12D45EE: 0F 84 E2 02 00 00        - je Disrupt_b64.dll+12D48D6
Disrupt_b64.dll+12D45F4: 8B 98 EC 00 00 00        - mov ebx,[rax+000000EC]
// ---------- INJECTING HERE ----------
Disrupt_b64.dll+12D45FA: 8B 80 A8 00 00 00        - mov eax,[rax+000000A8]
// ---------- DONE INJECTING  ----------
Disrupt_b64.dll+12D4600: 4C 89 A4 24 40 01 00 00  - mov [rsp+00000140],r12
Disrupt_b64.dll+12D4608: 89 85 80 00 00 00        - mov [rbp+00000080],eax
Disrupt_b64.dll+12D460E: 48 8B 86 20 0B 00 00     - mov rax,[rsi+00000B20]
Disrupt_b64.dll+12D4615: 48 8D 15 64 A9 D9 01     - lea rdx,[Disrupt_b64.dll+306EF80]
Disrupt_b64.dll+12D461C: 44 8B 60 78              - mov r12d,[rax+78]
Disrupt_b64.dll+12D4620: 48 8D 4C 24 28           - lea rcx,[rsp+28]
Disrupt_b64.dll+12D4625: 4C 89 AC 24 38 01 00 00  - mov [rsp+00000138],r13
Disrupt_b64.dll+12D462D: 41 FF CC                 - dec r12d
Disrupt_b64.dll+12D4630: 4C 89 B4 24 30 01 00 00  - mov [rsp+00000130],r14
Disrupt_b64.dll+12D4638: 89 5D 70                 - mov [rbp+70],ebx
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"items"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Watch_Dogs
  Version: 
  Date   : 2025-03-08
  Author : p

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(items,Disrupt_b64.dll,89 42 0C B0 01 48 8B) // should be unique
alloc(newmem,$1000,items)

label(code)
label(return)

newmem:

code:
  mov eax, #999
  mov [rdx+0C],eax
  mov al,01
  jmp return

items:
  jmp newmem
return:
registersymbol(items)

[DISABLE]

items:
  db 89 42 0C B0 01

unregistersymbol(items)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: Disrupt_b64.dll+EB167D

Disrupt_b64.dll+EB1664: 48 8B 74 24 48  - mov rsi,[rsp+48]
Disrupt_b64.dll+EB1669: 48 83 C4 20     - add rsp,20
Disrupt_b64.dll+EB166D: 5F              - pop rdi
Disrupt_b64.dll+EB166E: C3              - ret 
Disrupt_b64.dll+EB166F: 8B 42 0C        - mov eax,[rdx+0C]
Disrupt_b64.dll+EB1672: 83 F8 FF        - cmp eax,-01
Disrupt_b64.dll+EB1675: 74 E6           - je Disrupt_b64.dll+EB165D
Disrupt_b64.dll+EB1677: 3B C7           - cmp eax,edi
Disrupt_b64.dll+EB1679: 76 17           - jna Disrupt_b64.dll+EB1692
Disrupt_b64.dll+EB167B: 2B C7           - sub eax,edi
// ---------- INJECTING HERE ----------
Disrupt_b64.dll+EB167D: 89 42 0C        - mov [rdx+0C],eax
// ---------- DONE INJECTING  ----------
Disrupt_b64.dll+EB1680: B0 01           - mov al,01
Disrupt_b64.dll+EB1682: 48 8B 5C 24 40  - mov rbx,[rsp+40]
Disrupt_b64.dll+EB1687: 48 8B 74 24 48  - mov rsi,[rsp+48]
Disrupt_b64.dll+EB168C: 48 83 C4 20     - add rsp,20
Disrupt_b64.dll+EB1690: 5F              - pop rdi
Disrupt_b64.dll+EB1691: C3              - ret 
Disrupt_b64.dll+EB1692: 48 8B 5C 24 40  - mov rbx,[rsp+40]
Disrupt_b64.dll+EB1697: 48 8B 74 24 48  - mov rsi,[rsp+48]
Disrupt_b64.dll+EB169C: 33 C0           - xor eax,eax
Disrupt_b64.dll+EB169E: 89 42 0C        - mov [rdx+0C],eax
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
